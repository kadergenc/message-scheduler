// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "message-scheduler/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// MessagesRepositoryMock is an autogenerated mock type for the MessagesRepository type
type MessagesRepositoryMock struct {
	mock.Mock
}

type MessagesRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MessagesRepositoryMock) EXPECT() *MessagesRepositoryMock_Expecter {
	return &MessagesRepositoryMock_Expecter{mock: &_m.Mock}
}

// GetSentMessages provides a mock function with given fields: ctx, recordLimit
func (_m *MessagesRepositoryMock) GetSentMessages(ctx context.Context, recordLimit int) ([]*entity.MessagesEntity, error) {
	ret := _m.Called(ctx, recordLimit)

	if len(ret) == 0 {
		panic("no return value specified for GetSentMessages")
	}

	var r0 []*entity.MessagesEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*entity.MessagesEntity, error)); ok {
		return rf(ctx, recordLimit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*entity.MessagesEntity); ok {
		r0 = rf(ctx, recordLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.MessagesEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, recordLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagesRepositoryMock_GetSentMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSentMessages'
type MessagesRepositoryMock_GetSentMessages_Call struct {
	*mock.Call
}

// GetSentMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - recordLimit int
func (_e *MessagesRepositoryMock_Expecter) GetSentMessages(ctx interface{}, recordLimit interface{}) *MessagesRepositoryMock_GetSentMessages_Call {
	return &MessagesRepositoryMock_GetSentMessages_Call{Call: _e.mock.On("GetSentMessages", ctx, recordLimit)}
}

func (_c *MessagesRepositoryMock_GetSentMessages_Call) Run(run func(ctx context.Context, recordLimit int)) *MessagesRepositoryMock_GetSentMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MessagesRepositoryMock_GetSentMessages_Call) Return(_a0 []*entity.MessagesEntity, _a1 error) *MessagesRepositoryMock_GetSentMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessagesRepositoryMock_GetSentMessages_Call) RunAndReturn(run func(context.Context, int) ([]*entity.MessagesEntity, error)) *MessagesRepositoryMock_GetSentMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnsentMessages provides a mock function with given fields: ctx, recordLimit
func (_m *MessagesRepositoryMock) GetUnsentMessages(ctx context.Context, recordLimit int) ([]*entity.MessagesEntity, error) {
	ret := _m.Called(ctx, recordLimit)

	if len(ret) == 0 {
		panic("no return value specified for GetUnsentMessages")
	}

	var r0 []*entity.MessagesEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*entity.MessagesEntity, error)); ok {
		return rf(ctx, recordLimit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*entity.MessagesEntity); ok {
		r0 = rf(ctx, recordLimit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.MessagesEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, recordLimit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessagesRepositoryMock_GetUnsentMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnsentMessages'
type MessagesRepositoryMock_GetUnsentMessages_Call struct {
	*mock.Call
}

// GetUnsentMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - recordLimit int
func (_e *MessagesRepositoryMock_Expecter) GetUnsentMessages(ctx interface{}, recordLimit interface{}) *MessagesRepositoryMock_GetUnsentMessages_Call {
	return &MessagesRepositoryMock_GetUnsentMessages_Call{Call: _e.mock.On("GetUnsentMessages", ctx, recordLimit)}
}

func (_c *MessagesRepositoryMock_GetUnsentMessages_Call) Run(run func(ctx context.Context, recordLimit int)) *MessagesRepositoryMock_GetUnsentMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MessagesRepositoryMock_GetUnsentMessages_Call) Return(_a0 []*entity.MessagesEntity, _a1 error) *MessagesRepositoryMock_GetUnsentMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MessagesRepositoryMock_GetUnsentMessages_Call) RunAndReturn(run func(context.Context, int) ([]*entity.MessagesEntity, error)) *MessagesRepositoryMock_GetUnsentMessages_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, message
func (_m *MessagesRepositoryMock) Save(ctx context.Context, message *entity.MessagesEntity) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.MessagesEntity) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MessagesRepositoryMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MessagesRepositoryMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - message *entity.MessagesEntity
func (_e *MessagesRepositoryMock_Expecter) Save(ctx interface{}, message interface{}) *MessagesRepositoryMock_Save_Call {
	return &MessagesRepositoryMock_Save_Call{Call: _e.mock.On("Save", ctx, message)}
}

func (_c *MessagesRepositoryMock_Save_Call) Run(run func(ctx context.Context, message *entity.MessagesEntity)) *MessagesRepositoryMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.MessagesEntity))
	})
	return _c
}

func (_c *MessagesRepositoryMock_Save_Call) Return(_a0 error) *MessagesRepositoryMock_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessagesRepositoryMock_Save_Call) RunAndReturn(run func(context.Context, *entity.MessagesEntity) error) *MessagesRepositoryMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessagesRepositoryMock creates a new instance of MessagesRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagesRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagesRepositoryMock {
	mock := &MessagesRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
