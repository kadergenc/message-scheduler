// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	port "message-scheduler/internal/port"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SchedulerMock is an autogenerated mock type for the Scheduler type
type SchedulerMock struct {
	mock.Mock
}

type SchedulerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SchedulerMock) EXPECT() *SchedulerMock_Expecter {
	return &SchedulerMock_Expecter{mock: &_m.Mock}
}

// ScheduleJob provides a mock function with given fields: job, interval
func (_m *SchedulerMock) ScheduleJob(job port.Job, interval time.Duration) {
	_m.Called(job, interval)
}

// SchedulerMock_ScheduleJob_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScheduleJob'
type SchedulerMock_ScheduleJob_Call struct {
	*mock.Call
}

// ScheduleJob is a helper method to define mock.On call
//   - job port.Job
//   - interval time.Duration
func (_e *SchedulerMock_Expecter) ScheduleJob(job interface{}, interval interface{}) *SchedulerMock_ScheduleJob_Call {
	return &SchedulerMock_ScheduleJob_Call{Call: _e.mock.On("ScheduleJob", job, interval)}
}

func (_c *SchedulerMock_ScheduleJob_Call) Run(run func(job port.Job, interval time.Duration)) *SchedulerMock_ScheduleJob_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(port.Job), args[1].(time.Duration))
	})
	return _c
}

func (_c *SchedulerMock_ScheduleJob_Call) Return() *SchedulerMock_ScheduleJob_Call {
	_c.Call.Return()
	return _c
}

func (_c *SchedulerMock_ScheduleJob_Call) RunAndReturn(run func(port.Job, time.Duration)) *SchedulerMock_ScheduleJob_Call {
	_c.Run(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *SchedulerMock) Start(ctx context.Context) {
	_m.Called(ctx)
}

// SchedulerMock_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type SchedulerMock_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SchedulerMock_Expecter) Start(ctx interface{}) *SchedulerMock_Start_Call {
	return &SchedulerMock_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *SchedulerMock_Start_Call) Run(run func(ctx context.Context)) *SchedulerMock_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SchedulerMock_Start_Call) Return() *SchedulerMock_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *SchedulerMock_Start_Call) RunAndReturn(run func(context.Context)) *SchedulerMock_Start_Call {
	_c.Run(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *SchedulerMock) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SchedulerMock_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type SchedulerMock_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *SchedulerMock_Expecter) Stop() *SchedulerMock_Stop_Call {
	return &SchedulerMock_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *SchedulerMock_Stop_Call) Run(run func()) *SchedulerMock_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SchedulerMock_Stop_Call) Return(_a0 error) *SchedulerMock_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SchedulerMock_Stop_Call) RunAndReturn(run func() error) *SchedulerMock_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewSchedulerMock creates a new instance of SchedulerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSchedulerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SchedulerMock {
	mock := &SchedulerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
