// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	webhook "message-scheduler/internal/infra/client/webhook"

	mock "github.com/stretchr/testify/mock"
)

// WebhookClientMock is an autogenerated mock type for the WebhookClient type
type WebhookClientMock struct {
	mock.Mock
}

type WebhookClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WebhookClientMock) EXPECT() *WebhookClientMock_Expecter {
	return &WebhookClientMock_Expecter{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: ctx, to, content
func (_m *WebhookClientMock) SendMessage(ctx context.Context, to string, content string) (*webhook.WebhookResponse, error) {
	ret := _m.Called(ctx, to, content)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *webhook.WebhookResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*webhook.WebhookResponse, error)); ok {
		return rf(ctx, to, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *webhook.WebhookResponse); ok {
		r0 = rf(ctx, to, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*webhook.WebhookResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, to, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WebhookClientMock_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartMessageScheduler'
type WebhookClientMock_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - to string
//   - content string
func (_e *WebhookClientMock_Expecter) SendMessage(ctx interface{}, to interface{}, content interface{}) *WebhookClientMock_SendMessage_Call {
	return &WebhookClientMock_SendMessage_Call{Call: _e.mock.On("SendMessage", ctx, to, content)}
}

func (_c *WebhookClientMock_SendMessage_Call) Run(run func(ctx context.Context, to string, content string)) *WebhookClientMock_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *WebhookClientMock_SendMessage_Call) Return(_a0 *webhook.WebhookResponse, _a1 error) *WebhookClientMock_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WebhookClientMock_SendMessage_Call) RunAndReturn(run func(context.Context, string, string) (*webhook.WebhookResponse, error)) *WebhookClientMock_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewWebhookClientMock creates a new instance of WebhookClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWebhookClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WebhookClientMock {
	mock := &WebhookClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
